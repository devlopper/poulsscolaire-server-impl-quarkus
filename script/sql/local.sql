DROP TABLE IF EXISTS TA_PAIEMENT_FRAIS_AJUSTE;
DROP TABLE IF EXISTS TA_PAIEMENT_FRAIS_AJUSTE_AUD;
DROP TABLE IF EXISTS TA_CAISSE_ENREGISTREUSE;
DROP TABLE IF EXISTS TA_CAISSE_ENREGISTREUSE_AUD;
DROP TABLE IF EXISTS TA_PAIEMENT;
DROP TABLE IF EXISTS TA_PAIEMENT_AUD;
DROP TABLE IF EXISTS TA_FRAIS_AJUSTE;
DROP TABLE IF EXISTS TA_FRAIS_AJUSTE_AUD;
DROP TABLE IF EXISTS TA_FRAIS;
DROP TABLE IF EXISTS TA_FRAIS_AUD;
DROP TABLE IF EXISTS TA_ECHEANCE_MONTANT;
DROP TABLE IF EXISTS TA_ECHEANCE_MONTANT_AUD;
DROP TABLE IF EXISTS TA_MONTANT;
DROP TABLE IF EXISTS TA_MONTANT_AUD;
DROP TABLE IF EXISTS TA_INSCRIPTION;
DROP TABLE IF EXISTS TA_INSCRIPTION_AUD;
DROP TABLE IF EXISTS TA_ELEVE;
DROP TABLE IF EXISTS TA_ELEVE_AUD;
DROP TABLE IF EXISTS TA_RELATION_IDENTITE;
DROP TABLE IF EXISTS TA_RELATION_IDENTITE_AUD;
DROP TABLE IF EXISTS TA_IDENTITE;
DROP TABLE IF EXISTS TA_IDENTITE_AUD;
DROP TABLE IF EXISTS TA_SCOLARITE;
DROP TABLE IF EXISTS TA_SCOLARITE_AUD;
DROP TABLE IF EXISTS TA_ECHEANCE;
DROP TABLE IF EXISTS TA_ECHEANCE_AUD;
DROP TABLE IF EXISTS TA_GROUPE_ECHEANCE;
DROP TABLE IF EXISTS TA_GROUPE_ECHEANCE_AUD;
DROP TABLE IF EXISTS TA_MODE_PAIEMENT;
DROP TABLE IF EXISTS TA_MODE_PAIEMENT_AUD;
DROP TABLE IF EXISTS TA_TYPE_AFFECTATION;
DROP TABLE IF EXISTS TA_TYPE_AFFECTATION_AUD;
DROP TABLE IF EXISTS TA_ANCIENNETE;
DROP TABLE IF EXISTS TA_ANCIENNETE_AUD;
DROP TABLE IF EXISTS TA_RUBRIQUE;
DROP TABLE IF EXISTS TA_RUBRIQUE_AUD;
DROP TABLE IF EXISTS TA_GENRE;
DROP TABLE IF EXISTS TA_GENRE_AUD;

DROP TABLE REVINFO;

CREATE TABLE REVINFO (
	-- System identifier
	REV INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT 'Identifiant',
	REVTSTMP BIGINT NOT NULL COMMENT 'Date'
) COMMENT='Table des révisions';

CREATE TABLE TA_GROUPE_ECHEANCE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_GROUPE_ECHEANCE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_GROUPE_ECHEANCE_UK1 UNIQUE (CODE)
) COMMENT='Table des groupes d''échéances';

CREATE TABLE TA_GROUPE_ECHEANCE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_GROUPE_ECHEANCE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des groupes d''échéances';

CREATE TABLE TA_ECHEANCE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	CODE VARCHAR(64) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	GROUPE VARCHAR(36) NOT NULL COMMENT 'Identifiant du groupe',
	DATE_ TIMESTAMP NOT NULL COMMENT 'Date',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ECHEANCE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_ECHEANCE_FK1 FOREIGN KEY (GROUPE) REFERENCES TA_GROUPE_ECHEANCE(IDENTIFIANT),
	CONSTRAINT TA_ECHEANCE_UK1 UNIQUE (CODE),
	CONSTRAINT TA_ECHEANCE_UK2 UNIQUE (GROUPE, ECOLE, DATE_)
) COMMENT='Table des échéances';

CREATE TABLE TA_ECHEANCE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(64) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	GROUPE VARCHAR(36) NOT NULL COMMENT 'Identifiant du groupe',
	DATE_ TIMESTAMP NOT NULL COMMENT 'Date',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ECHEANCE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des échéances';

CREATE TABLE TA_MODE_PAIEMENT (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_MODE_PAIEMENT_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_MODE_PAIEMENT_UK1 UNIQUE (CODE)
) COMMENT='Table des modes de paiement';

CREATE TABLE TA_MODE_PAIEMENT_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_MODE_PAIEMENT_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des modes de paiement';

CREATE TABLE TA_CAISSE_ENREGISTREUSE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_CAISSE_ENREGISTREUSE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_CAISSE_ENREGISTREUSE_UK1 UNIQUE (CODE)
) COMMENT='Table des caisses enregistreuses';

CREATE TABLE TA_CAISSE_ENREGISTREUSE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_CAISSE_ENREGISTREUSE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des caisses enregistreuses';

CREATE TABLE TA_TYPE_AFFECTATION (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_TYPE_AFFECTATION_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_TYPE_AFFECTATION_UK1 UNIQUE (CODE)
) COMMENT='Table des types d''affectations';

CREATE TABLE TA_TYPE_AFFECTATION_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_TYPE_AFFECTATION_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des types d''affectations';

CREATE TABLE TA_ANCIENNETE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ANCIENNETE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_ANCIENNETE_UK1 UNIQUE (CODE)
) COMMENT='Table des anciennetés';

CREATE TABLE TA_ANCIENNETE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ANCIENNETE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des anciennetés';

CREATE TABLE TA_RUBRIQUE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_RUBRIQUE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_RUBRIQUE_UK1 UNIQUE (ECOLE,CODE)
) COMMENT='Table des rubriques';

CREATE TABLE TA_RUBRIQUE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_RUBRIQUE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des rubriques';

CREATE TABLE TA_GENRE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_GENRE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_GENRE_UK1 UNIQUE (CODE)
) COMMENT='Table des genres';

CREATE TABLE TA_GENRE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	LIBELLE VARCHAR(255) NOT NULL COMMENT 'Libellé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_GENRE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des genres';

CREATE TABLE TA_IDENTITE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	MATRICULE VARCHAR(100) COMMENT 'Matricule',
	NOM VARCHAR(100) NOT NULL COMMENT 'Nom',
	NOM_ARABE VARCHAR(100) COMMENT 'Nom arabe',
	PRENOMS VARCHAR(100) NOT NULL COMMENT 'Prénoms',
	PRENOMS_ARABE VARCHAR(100) COMMENT 'Prénoms arabe',
	GENRE VARCHAR(36) COMMENT 'Identifiant du genre',
	GROUPE_SANGUIN VARCHAR(3) COMMENT 'Groupe sanguin',
	DATE_NAISSANCE TIMESTAMP COMMENT 'Date de naissance',
	LIEU_NAISSANCE VARCHAR(255) COMMENT 'Lieu de naissance',
	REFERENCE_EXTRAIT_NAISSANCE VARCHAR(100) COMMENT 'Référence extrait de naissance',
	NATIONALITE VARCHAR(100) COMMENT 'Nationalité',
	SITUATION VARCHAR(100) COMMENT 'Situation',
	PROFESSION VARCHAR(100) COMMENT 'Profession',
	ADRESSE_EMAIL VARCHAR(320) COMMENT 'Adresse email',
	NUMERO_TELEPHONE VARCHAR(20) COMMENT 'Numéro de téléphone',
	LIEU_RESIDENCE VARCHAR(1024) COMMENT 'Lieu de résidence',
	AUTRES_CONTACTS VARCHAR(100) COMMENT 'Autres contacts',
	ETAT_SANTE VARCHAR(255) COMMENT 'Etat de santé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_IDENTITE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_IDENTITE_FK1 FOREIGN KEY (GENRE) REFERENCES TA_GENRE(IDENTIFIANT),
	CONSTRAINT TA_IDENTITE_UK1 UNIQUE (MATRICULE)
) COMMENT='Table des identités';

CREATE TABLE TA_IDENTITE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	MATRICULE VARCHAR(100) COMMENT 'Matricule',
	NOM VARCHAR(100) NOT NULL COMMENT 'Nom',
	NOM_ARABE VARCHAR(100) COMMENT 'Nom arabe',
	PRENOMS VARCHAR(100) NOT NULL COMMENT 'Prénoms',
	PRENOMS_ARABE VARCHAR(100) COMMENT 'Prénoms arabe',
	GENRE VARCHAR(36) COMMENT 'Identifiant du genre',
	GROUPE_SANGUIN VARCHAR(3) COMMENT 'Groupe sanguin',
	DATE_NAISSANCE TIMESTAMP COMMENT 'Date de naissance',
	LIEU_NAISSANCE VARCHAR(255) COMMENT 'Lieu de naissance',
	REFERENCE_EXTRAIT_NAISSANCE VARCHAR(100) COMMENT 'Référence extraite de naissance',
	NATIONALITE VARCHAR(100) COMMENT 'Nationalité',
	SITUATION VARCHAR(100) COMMENT 'Situation',
	PROFESSION VARCHAR(100) COMMENT 'Profession',
	ADRESSE_EMAIL VARCHAR(320) COMMENT 'Adresse email',
	NUMERO_TELEPHONE VARCHAR(20) COMMENT 'Numéro de téléphone',
	LIEU_RESIDENCE VARCHAR(1024) COMMENT 'Lieu de résidence',
	AUTRES_CONTACTS VARCHAR(100) COMMENT 'Autres contacts',
	ETAT_SANTE VARCHAR(255) COMMENT 'Etat de santé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_IDENTITE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des identités';

CREATE TABLE TA_RELATION_IDENTITE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	PARENT VARCHAR(36) NOT NULL COMMENT 'Identifiant du parent',
	ENFANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''enfant',
	TYPE VARCHAR(6) NOT NULL COMMENT 'Type',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_RELATION_IDENTITE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_RELATION_IDENTITE_FK1 FOREIGN KEY (PARENT) REFERENCES TA_IDENTITE(IDENTIFIANT),
	CONSTRAINT TA_RELATION_IDENTITE_FK2 FOREIGN KEY (ENFANT) REFERENCES TA_IDENTITE(IDENTIFIANT),
	CONSTRAINT TA_IDENTITE_UK1 UNIQUE (PARENT,ENFANT,TYPE)
) COMMENT='Table des relations d''identités';

CREATE TABLE TA_RELATION_IDENTITE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	PARENT VARCHAR(36) NOT NULL COMMENT 'Identifiant du parent',
	ENFANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''enfant',
	TYPE VARCHAR(6) NOT NULL COMMENT 'Type',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_IDENTITE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des relations d''identités';

CREATE TABLE TA_ELEVE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	IDENTITE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''identité',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	ECOLE_ORIGINE VARCHAR(255) COMMENT 'Ecole d''origine',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ELEVE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_ELEVE_FK1 FOREIGN KEY (IDENTITE) REFERENCES TA_IDENTITE(IDENTIFIANT),
	CONSTRAINT TA_ELEVE_UK1 UNIQUE (CODE)
) COMMENT='Table des élèves';

CREATE TABLE TA_ELEVE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	IDENTITE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''identité',
	ECOLE VARCHAR(255) NOT NULL COMMENT 'Identifiant de l''école',
	ECOLE_ORIGINE VARCHAR(255) COMMENT 'Ecole d''origine',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ELEVE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des élèves';

CREATE TABLE TA_SCOLARITE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	ECOLE VARCHAR(36) NOT NULL COMMENT 'Référence de l''école',
	BRANCHE VARCHAR(36) NOT NULL COMMENT 'Référence de la branche',
	PERIODE VARCHAR(36) NOT NULL COMMENT 'Référence de la période',
	MONTANT_PRE_INSCRIPTION INT NOT NULL COMMENT 'Montant de la pré-inscription',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_SCOLARITE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_SCOLARITE_UK1 UNIQUE (CODE),
	CONSTRAINT TA_SCOLARITE_UK2 UNIQUE (ECOLE, BRANCHE, PERIODE)
) COMMENT='Table des scolarités';

CREATE TABLE TA_SCOLARITE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(16) NOT NULL COMMENT 'Code',
	ECOLE VARCHAR(36) NOT NULL COMMENT 'Référence de l''école',
	BRANCHE VARCHAR(36) NOT NULL COMMENT 'Référence de la branche',
	PERIODE VARCHAR(36) NOT NULL COMMENT 'Référence de la période',
	MONTANT_PRE_INSCRIPTION INT NOT NULL COMMENT 'Montant de la pré-inscription',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_SCOLARITE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des scolarités';

CREATE TABLE TA_MONTANT (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	VALEUR INT NOT NULL COMMENT 'Valeur',
	VALEUR_INSCRIPTION INT COMMENT 'Valeur à l''inscription',
	FACULTATIF BOOLEAN COMMENT 'Facultativité',
	RECONDUCTIBLE BOOLEAN COMMENT 'Reconductibilité',
	NUMERO_ORDRE_PAIEMENT INT COMMENT 'Numéro d''ordre de paiement',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_MONTANT_PK PRIMARY KEY (IDENTIFIANT)
) COMMENT='Table des montants';

CREATE TABLE TA_MONTANT_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',

	VALEUR INT NOT NULL COMMENT 'Valeur',
	VALEUR_INSCRIPTION INT COMMENT 'Valeur à l''inscription',
	FACULTATIF BOOLEAN COMMENT 'Facultativité',
	RECONDUCTIBLE BOOLEAN COMMENT 'Reconductibilité',
	NUMERO_ORDRE_PAIEMENT INT COMMENT 'Numéro d''ordre de paiement',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_MONTANT_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des montants';

CREATE TABLE TA_ECHEANCE_MONTANT (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	MONTANT VARCHAR(36) NOT NULL COMMENT 'Identifiant du montant',
	ECHEANCE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''échéance',
	PAIEMENT INT NOT NULL COMMENT 'Paiement',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ECHEANCE_MONTANT_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_ECHEANCE_MONTANT_FK1 FOREIGN KEY (MONTANT) REFERENCES TA_MONTANT(IDENTIFIANT),
	CONSTRAINT TA_ECHEANCE_MONTANT_FK2 FOREIGN KEY (ECHEANCE) REFERENCES TA_ECHEANCE(IDENTIFIANT),
	CONSTRAINT TA_ECHEANCE_MONTANT_UK1 UNIQUE (MONTANT, ECHEANCE)
) COMMENT='Table des échéances de montants';

CREATE TABLE TA_ECHEANCE_MONTANT_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	MONTANT VARCHAR(36) NOT NULL COMMENT 'Identifiant du montant',
	ECHEANCE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''échéance',
	PAIEMENT INT NOT NULL COMMENT 'Paiement',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_ECHEANCE_MONTANT_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des échéances de montants';

CREATE TABLE TA_FRAIS (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	RUBRIQUE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la rubrique',
	TYPE_AFFECTATION VARCHAR(36) NOT NULL COMMENT 'Identifiant du type d''affectation',
	ANCIENNETE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''ancienneté',
	SCOLARITE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la scolarité',
	MONTANT VARCHAR(36) NOT NULL COMMENT 'Identifiant du montant',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_FRAIS_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_FRAIS_FK1 FOREIGN KEY (RUBRIQUE) REFERENCES TA_RUBRIQUE(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_FK2 FOREIGN KEY (TYPE_AFFECTATION) REFERENCES TA_TYPE_AFFECTATION(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_FK3 FOREIGN KEY (ANCIENNETE) REFERENCES TA_ANCIENNETE(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_FK4 FOREIGN KEY (SCOLARITE) REFERENCES TA_SCOLARITE(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_FK5 FOREIGN KEY (MONTANT) REFERENCES TA_MONTANT(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_UK1 UNIQUE (MONTANT),
	CONSTRAINT TA_FRAIS_UK2 UNIQUE (RUBRIQUE, TYPE_AFFECTATION, ANCIENNETE, SCOLARITE)
) COMMENT='Table des frais';

CREATE TABLE TA_FRAIS_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',

	RUBRIQUE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la rubrique',
	TYPE_AFFECTATION VARCHAR(36) NOT NULL COMMENT 'Identifiant du type d''affectation',
	ANCIENNETE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''ancienneté',
	SCOLARITE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la scolarité',
	MONTANT VARCHAR(36) NOT NULL COMMENT 'Identifiant du montant',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_FRAIS_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des frais';

CREATE TABLE TA_INSCRIPTION (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	CODE VARCHAR(26) NOT NULL COMMENT 'Code',

	ELEVE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''élève',
	TYPE_AFFECTATION VARCHAR(36) NOT NULL COMMENT 'Identifiant du type d''affectation',
	ANCIENNETE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''ancienneté',
	SCOLARITE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la scolarité',
	CLASSE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la classe',
	MONTANT_PRE_INSCRIPTION INT NOT NULL COMMENT 'Montant de la pré-inscription',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_INSCRIPTION_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_INSCRIPTION_FK1 FOREIGN KEY (ELEVE) REFERENCES TA_ELEVE(IDENTIFIANT),
	CONSTRAINT TA_INSCRIPTION_FK2 FOREIGN KEY (TYPE_AFFECTATION) REFERENCES TA_TYPE_AFFECTATION(IDENTIFIANT),
	CONSTRAINT TA_INSCRIPTION_FK3 FOREIGN KEY (ANCIENNETE) REFERENCES TA_ANCIENNETE(IDENTIFIANT),
	CONSTRAINT TA_INSCRIPTION_FK4 FOREIGN KEY (SCOLARITE) REFERENCES TA_SCOLARITE(IDENTIFIANT),
	CONSTRAINT TA_INSCRIPTION_UK1 UNIQUE (CODE),
	CONSTRAINT TA_INSCRIPTION_UK2 UNIQUE (ELEVE, SCOLARITE)
) COMMENT='Table des inscriptions';

CREATE TABLE TA_INSCRIPTION_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(26) NOT NULL COMMENT 'Code',

	ELEVE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''élève',
	TYPE_AFFECTATION VARCHAR(36) NOT NULL COMMENT 'Identifiant du type d''affectation',
	ANCIENNETE VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''ancienneté',
	SCOLARITE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la scolarité',
	CLASSE VARCHAR(36) NOT NULL COMMENT 'Identifiant de la classe',
	MONTANT_PRE_INSCRIPTION INT NOT NULL COMMENT 'Montant de la pré-inscription',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_INSCRIPTION_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des inscriptions';

CREATE TABLE TA_FRAIS_AJUSTE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	FRAIS VARCHAR(36) NOT NULL COMMENT 'Identifiant du frais',
	INSCRIPTION VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''inscription',
	MONTANT VARCHAR(36) NOT NULL COMMENT 'Identifiant du montant',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_FRAIS_AJUSTE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_FRAIS_AJUSTE_FK1 FOREIGN KEY (FRAIS) REFERENCES TA_FRAIS(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_AJUSTE_FK2 FOREIGN KEY (INSCRIPTION) REFERENCES TA_INSCRIPTION(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_AJUSTE_FK3 FOREIGN KEY (MONTANT) REFERENCES TA_MONTANT(IDENTIFIANT),
	CONSTRAINT TA_FRAIS_AJUSTE_UK1 UNIQUE (FRAIS, INSCRIPTION, MONTANT)
) COMMENT='Table des frais ajustés';

CREATE TABLE TA_FRAIS_AJUSTE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',

	FRAIS VARCHAR(36) NOT NULL COMMENT 'Identifiant du frais',
	INSCRIPTION VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''inscription',
	MONTANT VARCHAR(36) NOT NULL COMMENT 'Identifiant du montant',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_FRAIS_AJUSTE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des frais ajustés';

CREATE TABLE TA_PAIEMENT (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	CODE VARCHAR(30) NOT NULL COMMENT 'Code',
	INITIATEUR VARCHAR(255) COMMENT 'Initiateur',
	INSCRIPTION VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''inscription',
	MODE VARCHAR(36) NOT NULL COMMENT 'Identifiant du mode de paiement',
	ANNULE BOOLEAN COMMENT 'Annulé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_PAIEMENT_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_PAIEMENT_FK1 FOREIGN KEY (MODE) REFERENCES TA_MODE_PAIEMENT(IDENTIFIANT)
) COMMENT='Table des paiements';

CREATE TABLE TA_PAIEMENT_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',
	
	CODE VARCHAR(30) NOT NULL COMMENT 'Code',
	INITIATEUR VARCHAR(255) COMMENT 'Initiateur',
	INSCRIPTION VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''inscription',
	MODE VARCHAR(36) NOT NULL COMMENT 'Identifiant du mode de paiement',
	ANNULE BOOLEAN COMMENT 'Annulé',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_PAIEMENT_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des paiements';

CREATE TABLE TA_PAIEMENT_FRAIS_AJUSTE (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',

	MONTANT INT NOT NULL COMMENT 'Montant',
	PAIEMENT VARCHAR(36) NOT NULL COMMENT 'Identifiant du paiement',
	FRAIS_AJUSTE VARCHAR(36) NOT NULL COMMENT 'Identifiant du frais ajusté',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_PAIEMENT_FRAIS_AJUSTE_PK PRIMARY KEY (IDENTIFIANT),
	CONSTRAINT TA_PAIEMENT_FRAIS_AJUSTE_FK1 FOREIGN KEY (PAIEMENT) REFERENCES TA_PAIEMENT(IDENTIFIANT),
	CONSTRAINT TA_PAIEMENT_FRAIS_AJUSTE_FK2 FOREIGN KEY (FRAIS_AJUSTE) REFERENCES TA_FRAIS_AJUSTE(IDENTIFIANT),
	CONSTRAINT TA_PAIEMENT_FRAIS_AJUSTE_UK1 UNIQUE (PAIEMENT, FRAIS_AJUSTE)
) COMMENT='Table des paiements des frais ajustés';

CREATE TABLE TA_PAIEMENT_FRAIS_AJUSTE_AUD (
	-- Identification
	IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant',
	
	-- Audit
	REV INT NOT NULL COMMENT 'Identifiant de la révision',
	REVTYPE TINYINT NOT NULL COMMENT 'Type de révision',

	MONTANT INT NOT NULL COMMENT 'Montant',
	PAIEMENT VARCHAR(36) NOT NULL COMMENT 'Identifiant du paiement',
	FRAIS_AJUSTE VARCHAR(36) NOT NULL COMMENT 'Identifiant du frais ajusté',
	
	-- Audit
	 AUDIT_IDENTIFIANT VARCHAR(36) NOT NULL COMMENT 'Identifiant de l''audit',
	 AUDIT_ACTEUR VARCHAR(64) NOT NULL COMMENT 'Qui a fait',
	 AUDIT_FONCTIONNALITE VARCHAR(64) NOT NULL COMMENT 'La fonctionnalité faite',
	 AUDIT_ACTION VARCHAR(12) NOT NULL COMMENT 'Quoi a été fait sur la donnée',
	 AUDIT_DATE TIMESTAMP NOT NULL COMMENT 'Quand cela a été fait',
	 AUDIT_SESSION VARCHAR(36) COMMENT 'Dans quelle session cela a été fait',
	 
	-- Constraints
	CONSTRAINT TA_PAIEMENT_FRAIS_AJUSTE_AUD_PK PRIMARY KEY (IDENTIFIANT,REV)
) COMMENT='Table des audits des paiements des frais ajustés';

INSERT INTO TA_GENRE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('71ec973b-ad3a-46b0-821a-de35a73421a1','F','Féminin','71593f89-63ad-4813-9dd8-c37355d48b4d','christian','Création genre','CREATION','2024-04-08 10:52:39','8a08f486-dc79-4379-8120-ab4113aac14d');
INSERT INTO TA_GENRE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('7d4ada55-39b1-4835-9bb5-4b31519ceccb','M','Masculin','021b6ad0-fc9d-43ba-b018-50dbb9d5ec95','christian','Création genre','CREATION','2024-04-08 10:52:46','33f6562d-e750-4245-98ba-81ace86a907c');
COMMIT;

INSERT INTO TA_ANCIENNETE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('94fe14ce-448b-4dc6-9662-d02121feac49','ANC','Ancien','4d79f574-ab5b-4617-a5ea-6b475e78d460','christian','Création ancienneté','CREATION','2024-04-08 10:53:20','630f2ca8-e557-45cc-8e59-14ce32eaff62');
INSERT INTO TA_ANCIENNETE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('c4033457-4af9-4436-a740-c4e8a5765dad','NOU','Nouveau','b097c0f6-d615-48bd-9875-6e6f0089c221','christian','Création ancienneté','CREATION','2024-04-08 10:53:27','92fe3139-7d8f-4ea4-8b93-65cf84150380');
COMMIT;

INSERT INTO TA_TYPE_AFFECTATION (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('17ee7ff4-a05f-4875-bd72-42aa239781e1','NAFF','Non affecté','39e4071e-d010-492c-b5a9-bedd342f1e35','christian','Création type d\'affectation','CREATION','2024-04-08 10:53:09','7baae3c7-5e2d-4e08-8965-c98722a0e132');
INSERT INTO TA_TYPE_AFFECTATION (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('ac5a7195-cafb-4b23-808d-50d70692a444','AFF','Affecté','ac53ce16-0868-4017-aef3-389638917e8c','christian','Création type d\'affectation','CREATION','2024-04-08 10:52:59','56dc8376-dea2-42ef-a5b2-73ae8bb1eb5a');
COMMIT;

INSERT INTO TA_GROUPE_ECHEANCE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('66ad61ce-abcc-494e-9286-220af63f45e8','MOIS','Mois','a0bf0711-0483-4412-b3ae-6d612ced3aac','christian','Création groupe d\'échéance','CREATION','2024-05-04 18:23:10','7b89da13-31fd-4941-8ce8-662b0d8553c0');
INSERT INTO TA_GROUPE_ECHEANCE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('945ea068-4242-4b57-a2e4-a06bf679826f','ANNUEL','Annuel','2e6c3ea3-b22d-48e6-aafc-c3e7269e6ebf','christian','Création groupe d\'échéance','CREATION','2024-05-04 18:23:38','904e34ef-9c2f-4027-9fad-a37b7ac52a59');
INSERT INTO TA_GROUPE_ECHEANCE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('98254fdf-9c14-44b3-82ed-1b76fb4e7294','TRIMESTRE','Trimestre','69313a70-6d1a-4e3d-b2d9-000228d508b3','christian','Création groupe d\'échéance','CREATION','2024-05-04 18:23:21','4f66e2ca-5857-4183-a932-d3eaa70262f9');
INSERT INTO TA_GROUPE_ECHEANCE (IDENTIFIANT,CODE,LIBELLE,AUDIT_IDENTIFIANT,AUDIT_ACTEUR,AUDIT_FONCTIONNALITE,AUDIT_ACTION,AUDIT_DATE,AUDIT_SESSION) VALUES ('d4a37543-53d0-4051-9b26-388698df8cd0','SEMESTRE','Semestre','f2f1b254-69a3-42d7-ba77-0210372c0c6d','christian','Création groupe d\'échéance','CREATION','2024-05-04 18:23:29','f558b287-56da-4087-befb-3d4e3a1fc754');
COMMIT;

CREATE OR REPLACE VIEW V_MONTANTS_FRAIS_AJUSTE AS
SELECT TA_FRAIS_AJUSTE.IDENTIFIANT
	,A_PAYER.MONTANT AS A_PAYER
	,A_PAYER.INSCRIPTION AS A_PAYER_INSCRIPTION
	,COALESCE(PAYE.MONTANT,0) AS PAYE
	,COALESCE(PAYE.INSCRIPTION,0) AS PAYE_INSCRIPTION
	,A_PAYER.MONTANT - COALESCE(PAYE.MONTANT,0) AS RESTE_A_PAYER
	,A_PAYER.INSCRIPTION - COALESCE(PAYE.INSCRIPTION,0) AS RESTE_A_PAYER_INSCRIPTION
	,CASE WHEN A_PAYER.MONTANT - COALESCE(PAYE.MONTANT,0) <= 0 THEN 1 ELSE 0 END
	  AS RESTE_A_PAYER_INFERIEUR_OU_EGALE_ZERO
	,ECHEANCE_EN_COURS.ECHEANCE AS ECHEANCE
	,COALESCE(ECHEANCES_PASSEES.A_PAYER,COALESCE(PAYE.MONTANT,0)) - COALESCE(PAYE.MONTANT,0)
	  + COALESCE(ECHEANCE_EN_COURS.A_PAYER,0) AS PAIEMENT_ATTENDU
	,CASE WHEN COALESCE(PAYE.MONTANT,0) - COALESCE(ECHEANCES_PASSEES.A_PAYER,0) < 0
	  THEN 1 ELSE 0 END AS RETARD_DE_PAIEMENT
	,TA_INSCRIPTION.IDENTIFIANT AS INSCRIPTION
	,TA_SCOLARITE.IDENTIFIANT AS SCOLARITE
	,TA_RUBRIQUE.IDENTIFIANT AS RUBRIQUE
	,TA_SCOLARITE.ECOLE AS ECOLE
FROM TA_FRAIS_AJUSTE
JOIN TA_MONTANT ON TA_MONTANT.IDENTIFIANT = TA_FRAIS_AJUSTE.MONTANT AND TA_MONTANT.FACULTATIF IS FALSE
JOIN TA_INSCRIPTION ON TA_INSCRIPTION.IDENTIFIANT = TA_FRAIS_AJUSTE.INSCRIPTION
JOIN TA_SCOLARITE ON TA_SCOLARITE.IDENTIFIANT =TA_INSCRIPTION.SCOLARITE
JOIN TA_FRAIS ON TA_FRAIS.IDENTIFIANT = TA_FRAIS_AJUSTE.FRAIS
JOIN TA_RUBRIQUE ON TA_RUBRIQUE.IDENTIFIANT = TA_FRAIS.RUBRIQUE
LEFT JOIN
	(-- Montant à payer
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,TA_MONTANT.VALEUR AS MONTANT
	  ,TA_MONTANT.VALEUR_INSCRIPTION AS INSCRIPTION
	FROM TA_FRAIS_AJUSTE
	JOIN TA_MONTANT ON TA_MONTANT.IDENTIFIANT = TA_FRAIS_AJUSTE.MONTANT)
	  AS A_PAYER ON A_PAYER.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
LEFT JOIN
	(-- Montant payé
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,SUM(TA_PAIEMENT_FRAIS_AJUSTE.MONTANT) AS MONTANT
	  ,(CASE WHEN TA_MONTANT.VALEUR_INSCRIPTION <= SUM(TA_PAIEMENT_FRAIS_AJUSTE.MONTANT)
		THEN TA_MONTANT.VALEUR_INSCRIPTION
		ELSE SUM(TA_PAIEMENT_FRAIS_AJUSTE.MONTANT) END) AS INSCRIPTION
	FROM TA_FRAIS_AJUSTE
	JOIN TA_MONTANT ON TA_MONTANT.IDENTIFIANT = TA_FRAIS_AJUSTE.MONTANT
	JOIN TA_FRAIS ON TA_FRAIS.IDENTIFIANT = TA_FRAIS_AJUSTE.FRAIS
	JOIN TA_INSCRIPTION ON TA_INSCRIPTION.IDENTIFIANT = TA_FRAIS_AJUSTE.INSCRIPTION
	JOIN TA_PAIEMENT ON TA_PAIEMENT.INSCRIPTION = TA_INSCRIPTION.IDENTIFIANT 
		AND TA_PAIEMENT.ANNULE IS FALSE
	JOIN TA_PAIEMENT_FRAIS_AJUSTE ON
	  TA_PAIEMENT_FRAIS_AJUSTE.PAIEMENT = TA_PAIEMENT.IDENTIFIANT
	  AND TA_PAIEMENT_FRAIS_AJUSTE.FRAIS_AJUSTE = TA_FRAIS_AJUSTE.IDENTIFIANT
	GROUP BY TA_FRAIS_AJUSTE.IDENTIFIANT)
	  AS PAYE ON PAYE.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
LEFT JOIN
	(-- Période échéancier
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,MIN(TA_ECHEANCE.DATE_) AS DEBUT
	  ,MAX(TA_ECHEANCE.DATE_) AS FIN
	  FROM TA_FRAIS_AJUSTE
	  JOIN TA_ECHEANCE_MONTANT ON TA_ECHEANCE_MONTANT.MONTANT = TA_FRAIS_AJUSTE.MONTANT
	  JOIN TA_ECHEANCE ON TA_ECHEANCE.IDENTIFIANT = TA_ECHEANCE_MONTANT.ECHEANCE
	  GROUP BY TA_FRAIS_AJUSTE.IDENTIFIANT)
		AS PERIODE_ECHEANCE ON PERIODE_ECHEANCE.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
LEFT JOIN
	(-- échéance en cours
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,em.IDENTIFIANT AS ECHEANCE_MONTANT,em.PAIEMENT AS A_PAYER
	  ,TA_ECHEANCE.IDENTIFIANT AS ECHEANCE
	  ,TA_ECHEANCE.DATE_ AS DATE_
	  FROM TA_FRAIS_AJUSTE
	  JOIN TA_ECHEANCE_MONTANT em ON em.MONTANT = TA_FRAIS_AJUSTE.MONTANT
	  JOIN TA_ECHEANCE ON TA_ECHEANCE.IDENTIFIANT = em.ECHEANCE
	  WHERE TA_ECHEANCE.DATE_ = (SELECT MIN(e.DATE_)
		FROM TA_ECHEANCE_MONTANT t
		JOIN TA_ECHEANCE e ON e.IDENTIFIANT = t.ECHEANCE
		WHERE t.MONTANT = em.MONTANT AND e.DATE_ >= NOW()))
		AS ECHEANCE_EN_COURS ON ECHEANCE_EN_COURS.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
LEFT JOIN
	(-- Montant échéances passées
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	,SUM(TA_ECHEANCE_MONTANT.PAIEMENT) AS A_PAYER
	FROM TA_FRAIS_AJUSTE
	JOIN TA_ECHEANCE_MONTANT ON TA_ECHEANCE_MONTANT.MONTANT = TA_FRAIS_AJUSTE.MONTANT
	JOIN TA_ECHEANCE ON TA_ECHEANCE.IDENTIFIANT = TA_ECHEANCE_MONTANT.ECHEANCE
	WHERE TA_ECHEANCE.DATE_ < NOW()
	GROUP BY TA_FRAIS_AJUSTE.IDENTIFIANT)
	  AS ECHEANCES_PASSEES ON ECHEANCES_PASSEES.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT;

CREATE OR REPLACE VIEW V_MONTANTS_INSCRIPTION AS
SELECT
	INSCRIPTION AS IDENTIFIANT
	,SUM(A_PAYER) AS A_PAYER
	,SUM(A_PAYER_INSCRIPTION) AS A_PAYER_INSCRIPTION
	,SUM(PAYE) AS PAYE
	,SUM(PAYE_INSCRIPTION) AS PAYE_INSCRIPTION
	,SUM(RESTE_A_PAYER) AS RESTE_A_PAYER
	,SUM(RESTE_A_PAYER_INSCRIPTION) AS RESTE_A_PAYER_INSCRIPTION
	,MAX(RESTE_A_PAYER_INFERIEUR_OU_EGALE_ZERO) AS RESTE_A_PAYER_INFERIEUR_OU_EGALE_ZERO
	,SUM(PAIEMENT_ATTENDU) AS PAIEMENT_ATTENDU
	,MAX(RETARD_DE_PAIEMENT) AS RETARD_DE_PAIEMENT
FROM V_MONTANTS_FRAIS_AJUSTE
GROUP BY INSCRIPTION;

CREATE OR REPLACE VIEW V_MONTANTS_INSCRIPTION_RUBRIQUE AS
SELECT
	INSCRIPTION AS IDENTIFIANT
    ,RUBRIQUE AS RUBRIQUE
    ,NULL AS ECHEANCE
	,SUM(A_PAYER) AS A_PAYER
	,SUM(A_PAYER_INSCRIPTION) AS A_PAYER_INSCRIPTION
	,SUM(PAYE) AS PAYE
	,SUM(PAYE_INSCRIPTION) AS PAYE_INSCRIPTION
	,SUM(RESTE_A_PAYER) AS RESTE_A_PAYER
	,SUM(RESTE_A_PAYER_INSCRIPTION) AS RESTE_A_PAYER_INSCRIPTION
	,MAX(RESTE_A_PAYER_INFERIEUR_OU_EGALE_ZERO) AS RESTE_A_PAYER_INFERIEUR_OU_EGALE_ZERO
	,SUM(PAIEMENT_ATTENDU) AS PAIEMENT_ATTENDU
	,MAX(RETARD_DE_PAIEMENT) AS RETARD_DE_PAIEMENT
FROM V_MONTANTS_FRAIS_AJUSTE
GROUP BY INSCRIPTION,RUBRIQUE;

CREATE OR REPLACE VIEW V_AUDITS_PAIEMENT AS
SELECT
	TA_PAIEMENT.IDENTIFIANT   
	,creation.date_ AS DATE_CREATION, creation.acteur AS ACTEUR_CREATION
	,annulation.date_ AS DATE_ANNULATION, annulation.acteur AS ACTEUR_ANNULATION
FROM TA_PAIEMENT
JOIN (
	-- Création
	SELECT
	  TA_PAIEMENT_AUD.IDENTIFIANT
	  ,TA_PAIEMENT_AUD.AUDIT_DATE AS DATE_
	  ,TA_PAIEMENT_AUD.AUDIT_ACTEUR AS ACTEUR
	FROM TA_PAIEMENT
	JOIN TA_PAIEMENT_AUD ON TA_PAIEMENT_AUD.IDENTIFIANT = TA_PAIEMENT.IDENTIFIANT
	  AND TA_PAIEMENT_AUD.REVTYPE = 0
	  ) AS creation ON creation.IDENTIFIANT = TA_PAIEMENT.IDENTIFIANT
LEFT JOIN (
	-- Annulation
	SELECT
	  TA_PAIEMENT_AUD.IDENTIFIANT
	  ,TA_PAIEMENT_AUD.AUDIT_DATE AS DATE_
	  ,TA_PAIEMENT_AUD.AUDIT_ACTEUR AS ACTEUR
	FROM TA_PAIEMENT
	JOIN TA_PAIEMENT_AUD ON TA_PAIEMENT_AUD.IDENTIFIANT = TA_PAIEMENT.IDENTIFIANT
	  AND TA_PAIEMENT_AUD.REVTYPE = 1
	WHERE TA_PAIEMENT_AUD.ANNULE IS TRUE
	ORDER BY TA_PAIEMENT_AUD.AUDIT_DATE DESC
	LIMIT 1
	  ) AS annulation ON annulation.IDENTIFIANT = TA_PAIEMENT.IDENTIFIANT;

CREATE OR REPLACE VIEW V_MONTANTS_PAIEMENT AS
SELECT
  TA_PAIEMENT.IDENTIFIANT
  ,montant.valeur AS TOTAL
FROM TA_PAIEMENT
  JOIN (
  -- Total
  SELECT
    TA_PAIEMENT.IDENTIFIANT
    ,SUM(TA_PAIEMENT_FRAIS_AJUSTE.MONTANT) AS VALEUR
  FROM TA_PAIEMENT
  JOIN TA_PAIEMENT_FRAIS_AJUSTE ON TA_PAIEMENT_FRAIS_AJUSTE.PAIEMENT = TA_PAIEMENT.IDENTIFIANT
  GROUP BY TA_PAIEMENT.IDENTIFIANT
  ) AS montant ON montant.IDENTIFIANT = TA_PAIEMENT.IDENTIFIANT;

CREATE OR REPLACE VIEW VT_RECU_PAIEMENT AS
SELECT
	-- Paiement
	paiement.identifiant AS IDENTIFIANT_PAIEMENT
    ,paiement.code AS CODE_PAIEMENT
    ,montantsPaiement.total AS MONTANT_VERSE
    ,auditsPaiement.date_creation AS DATE_VERSEMENT
    ,auditsPaiement.acteur_creation AS NOM_ET_PRENOM_CAISSIER
    -- Inscription
    ,inscription.code AS NUMERO_INSCRIPTION
    ,typeAffectation.LIBELLE AS STATUT
    ,anciennete.LIBELLE AS ANCIENNETE
    ,montantsInscription.A_PAYER AS MONTANT_TOTAL_SCOLARITE
    ,montantsInscription.PAYE AS MONTANT_TOTAL_VERSE
    ,montantsInscription.RESTE_A_PAYER AS MONTANT_TOTAL_RESTANT
    -- Eleve
    ,identiteEleve.MATRICULE AS MATRICULE
    ,CONCAT(identiteEleve.NOM,' ',identiteEleve.PRENOMS) AS NOM_ET_PRENOMS
    ,CONCAT(identiteEleve.NOM_ARABE,' ',identiteEleve.PRENOMS_ARABE) AS NOM_PRENOMS_ARABE
    ,identiteEleve.DATE_NAISSANCE AS DATE_NAISSANCE
    ,identiteEleve.LIEU_NAISSANCE AS LIEU_NAISSANCE
    ,genreEleve.LIBELLE AS SEXE
    -- Ecole
    ,ecole.ecoleclibelle AS LIBELLE_ECOLE
    ,branche.libelle AS LIBELLE_BRANCHE
    ,annee_scolaire.annee_scolaire_libelle AS LIBELLE_PERIODE
FROM TA_PAIEMENT paiement
JOIN V_AUDITS_PAIEMENT auditsPaiement ON auditsPaiement.identifiant = paiement.identifiant
JOIN V_MONTANTS_PAIEMENT montantsPaiement ON montantsPaiement.identifiant = paiement.identifiant
JOIN TA_INSCRIPTION inscription ON inscription.IDENTIFIANT = paiement.INSCRIPTION
JOIN TA_TYPE_AFFECTATION typeAffectation ON typeAffectation.IDENTIFIANT = inscription.TYPE_AFFECTATION
JOIN TA_ANCIENNETE anciennete ON anciennete.IDENTIFIANT = inscription.ANCIENNETE
JOIN V_MONTANTS_INSCRIPTION montantsInscription ON montantsInscription.identifiant = inscription.IDENTIFIANT
JOIN TA_ELEVE eleve ON eleve.IDENTIFIANT = inscription.ELEVE
JOIN TA_IDENTITE identiteEleve ON identiteEleve.IDENTIFIANT = eleve.IDENTITE
LEFT JOIN TA_GENRE genreEleve ON genreEleve.IDENTIFIANT = identiteEleve.GENRE
JOIN TA_SCOLARITE scolarite ON scolarite.IDENTIFIANT = inscription.SCOLARITE
JOIN ecoleviedbv2.ecole ecole ON ecole.ecoleid = scolarite.ECOLE
JOIN ecoleviedbv2.Branche branche ON branche.id = scolarite.BRANCHE
JOIN ecoleviedbv2.annee_scolaire annee_scolaire ON annee_scolaire.annee_scolaireid = scolarite.PERIODE;

CREATE OR REPLACE VIEW VT_RECU_PAIEMENT_RUBRIQUE AS
SELECT 
	paiement.IDENTIFIANT AS IDENTIFIANT_PAIEMENT
    ,rubrique.LIBELLE AS LIBELLE_RUBRIQUE
    ,montants.A_PAYER
    ,montants.A_PAYER_INSCRIPTION
    ,montants.PAYE
    ,montants.RESTE_A_PAYER
    ,montants.RESTE_A_PAYER_INSCRIPTION
    ,montants.ECHEANCE AS ECHEANCE_EN_COURS
    ,montants.PAIEMENT_ATTENDU
FROM TA_PAIEMENT paiement
JOIN V_MONTANTS_INSCRIPTION_RUBRIQUE montants ON montants.IDENTIFIANT = paiement.INSCRIPTION
JOIN TA_RUBRIQUE rubrique ON rubrique.IDENTIFIANT = montants.RUBRIQUE;

CREATE OR REPLACE VIEW VT_RECU_PAIEMENT_AUTRE_BRANCHE AS
SELECT 
	paiement.IDENTIFIANT AS IDENTIFIANT_PAIEMENT
    ,branche.libelle AS AUTRE_BRANCHE
FROM TA_PAIEMENT paiement
-- Inscription payé
JOIN TA_INSCRIPTION inscriptionPaye ON inscriptionPaye.IDENTIFIANT = paiement.INSCRIPTION
JOIN TA_SCOLARITE scolaritePaye ON scolaritePaye.IDENTIFIANT = inscriptionPaye.SCOLARITE
-- AUtre inscription de la même période
JOIN TA_INSCRIPTION inscriptionAutre ON inscriptionAutre.TYPE_AFFECTATION = inscriptionPaye.TYPE_AFFECTATION
	AND inscriptionAutre.ANCIENNETE = inscriptionPaye.ANCIENNETE AND inscriptionAutre.ELEVE = inscriptionPaye.ELEVE
JOIN TA_SCOLARITE scolariteAutre ON scolariteAutre.IDENTIFIANT = inscriptionAutre.SCOLARITE 
	AND scolariteAutre.PERIODE = scolaritePaye.PERIODE
JOIN ecoleviedbv2.Branche branche ON branche.id = scolariteAutre.BRANCHE;

CREATE OR REPLACE VIEW VE_RECU_PAIEMENT AS
SELECT *
FROM VT_RECU_PAIEMENT
-- La jointure avec le detail sera fait tout à l'heure

CREATE OR REPLACE VIEW V_FRAIS_AJUSTE AS
SELECT 
	TA_FRAIS_AJUSTE.IDENTIFIANT
	,A_PAYER.MONTANT AS A_PAYER
	,A_PAYER.INSCRIPTION AS A_PAYER_INSCRIPTION
	,COALESCE(PAYE.MONTANT,0) AS PAYE
	,COALESCE(PAYE.INSCRIPTION,0) AS PAYE_INSCRIPTION
	,A_PAYER.MONTANT - COALESCE(PAYE.MONTANT,0) AS RESTE_A_PAYER
	,A_PAYER.INSCRIPTION - COALESCE(PAYE.INSCRIPTION,0) AS RESTE_A_PAYER_INSCRIPTION
	,CASE WHEN A_PAYER.MONTANT - COALESCE(PAYE.MONTANT,0) <= 0 THEN 1 ELSE 0 END
	  AS RESTE_A_PAYER_INFERIEUR_OU_EGALE_ZERO
	,ECHEANCE_EN_COURS.ECHEANCE AS ECHEANCE
	,COALESCE(ECHEANCES_PASSEES.A_PAYER,0) - COALESCE(PAYE.MONTANT,0)
	  + COALESCE(ECHEANCE_EN_COURS.A_PAYER,0) AS PAIEMENT_ATTENDU
	,CASE WHEN COALESCE(PAYE.MONTANT,0) - COALESCE(ECHEANCES_PASSEES.A_PAYER,0) < 0
	  THEN 1 ELSE 0 END AS RETARD_DE_PAIEMENT
	,TA_INSCRIPTION.IDENTIFIANT AS INSCRIPTION
	,TA_SCOLARITE.IDENTIFIANT AS SCOLARITE
	,TA_RUBRIQUE.IDENTIFIANT AS RUBRIQUE
	,TA_SCOLARITE.ECOLE AS ECOLE
	FROM TA_FRAIS_AJUSTE
	JOIN TA_MONTANT ON TA_MONTANT.IDENTIFIANT = TA_FRAIS_AJUSTE.MONTANT
	AND TA_MONTANT.FACULTATIF IS FALSE
	JOIN TA_INSCRIPTION ON TA_INSCRIPTION.IDENTIFIANT = TA_FRAIS_AJUSTE.INSCRIPTION
	JOIN TA_SCOLARITE ON TA_SCOLARITE.IDENTIFIANT =TA_INSCRIPTION.SCOLARITE
	JOIN TA_FRAIS ON TA_FRAIS.IDENTIFIANT = TA_FRAIS_AJUSTE.FRAIS
	JOIN TA_RUBRIQUE ON TA_RUBRIQUE.IDENTIFIANT = TA_FRAIS.RUBRIQUE
	LEFT JOIN
	(-- Montant à payer
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,TA_MONTANT.VALEUR AS MONTANT
	  ,TA_MONTANT.VALEUR_INSCRIPTION AS INSCRIPTION
FROM TA_FRAIS_AJUSTE
	JOIN TA_MONTANT ON TA_MONTANT.IDENTIFIANT = TA_FRAIS_AJUSTE.MONTANT)
	  AS A_PAYER ON A_PAYER.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
	LEFT JOIN
	(-- Montant payé
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,SUM(TA_PAIEMENT_FRAIS_AJUSTE.MONTANT) AS MONTANT
	  ,(CASE WHEN TA_MONTANT.VALEUR_INSCRIPTION <= SUM(TA_PAIEMENT_FRAIS_AJUSTE.MONTANT)
		THEN TA_MONTANT.VALEUR_INSCRIPTION
		ELSE SUM(TA_PAIEMENT_FRAIS_AJUSTE.MONTANT) END) AS INSCRIPTION
	FROM TA_FRAIS_AJUSTE
	JOIN TA_MONTANT ON TA_MONTANT.IDENTIFIANT = TA_FRAIS_AJUSTE.MONTANT
	JOIN TA_FRAIS ON TA_FRAIS.IDENTIFIANT = TA_FRAIS_AJUSTE.FRAIS
	JOIN TA_INSCRIPTION ON TA_INSCRIPTION.IDENTIFIANT = TA_FRAIS_AJUSTE.INSCRIPTION
	JOIN TA_PAIEMENT ON TA_PAIEMENT.INSCRIPTION = TA_INSCRIPTION.IDENTIFIANT 
		AND TA_PAIEMENT.ANNULE IS FALSE
	JOIN TA_PAIEMENT_FRAIS_AJUSTE ON
	  TA_PAIEMENT_FRAIS_AJUSTE.PAIEMENT = TA_PAIEMENT.IDENTIFIANT
	  AND TA_PAIEMENT_FRAIS_AJUSTE.FRAIS_AJUSTE = TA_FRAIS_AJUSTE.IDENTIFIANT
	GROUP BY TA_FRAIS_AJUSTE.IDENTIFIANT)
	  AS PAYE ON PAYE.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
	LEFT JOIN
	(-- Période échéancier
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,MIN(TA_ECHEANCE.DATE_) AS DEBUT
	  ,MAX(TA_ECHEANCE.DATE_) AS FIN
	  FROM TA_FRAIS_AJUSTE
	  JOIN TA_ECHEANCE_MONTANT ON TA_ECHEANCE_MONTANT.MONTANT = TA_FRAIS_AJUSTE.MONTANT
	  JOIN TA_ECHEANCE ON TA_ECHEANCE.IDENTIFIANT = TA_ECHEANCE_MONTANT.ECHEANCE
	  GROUP BY TA_FRAIS_AJUSTE.IDENTIFIANT)
		AS PERIODE_ECHEANCE ON PERIODE_ECHEANCE.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
	LEFT JOIN
	(-- échéance en cours
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	  ,em.IDENTIFIANT AS ECHEANCE_MONTANT,em.PAIEMENT AS A_PAYER
	  ,TA_ECHEANCE.IDENTIFIANT AS ECHEANCE
	  ,TA_ECHEANCE.DATE_ AS DATE_
	  FROM TA_FRAIS_AJUSTE
	  JOIN TA_ECHEANCE_MONTANT em ON em.MONTANT = TA_FRAIS_AJUSTE.MONTANT
	  JOIN TA_ECHEANCE ON TA_ECHEANCE.IDENTIFIANT = em.ECHEANCE
	  WHERE TA_ECHEANCE.DATE_ = (SELECT MIN(e.DATE_)
		FROM TA_ECHEANCE_MONTANT t
		JOIN TA_ECHEANCE e ON e.IDENTIFIANT = t.ECHEANCE
		WHERE t.MONTANT = em.MONTANT AND e.DATE_ >= NOW()))
		AS ECHEANCE_EN_COURS ON ECHEANCE_EN_COURS.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT
	LEFT JOIN
	(-- Montant échéances passées
	SELECT TA_FRAIS_AJUSTE.IDENTIFIANT AS IDENTIFIANT
	,SUM(TA_ECHEANCE_MONTANT.PAIEMENT) AS A_PAYER
	FROM TA_FRAIS_AJUSTE
	JOIN TA_ECHEANCE_MONTANT ON TA_ECHEANCE_MONTANT.MONTANT = TA_FRAIS_AJUSTE.MONTANT
	JOIN TA_ECHEANCE ON TA_ECHEANCE.IDENTIFIANT = TA_ECHEANCE_MONTANT.ECHEANCE
	WHERE TA_ECHEANCE.DATE_ < NOW()
	GROUP BY TA_FRAIS_AJUSTE.IDENTIFIANT)
	  AS ECHEANCES_PASSEES ON ECHEANCES_PASSEES.IDENTIFIANT = TA_FRAIS_AJUSTE.IDENTIFIANT